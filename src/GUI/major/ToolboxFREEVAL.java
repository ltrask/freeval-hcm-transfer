package GUI.major;

import main.FREEVAL_HCM;

/**
 * This class is the toolbox in main window. Most of the methods provide a link
 * to call methods in mainWindow instead of containing actual codes.
 *
 * @author Shu Liu
 */
public class ToolboxFREEVAL extends Toolbox {

    private MainWindow mainWindow;

    /**
     * Creates new Toolbox
     */
    public ToolboxFREEVAL() {
        initComponents();
        if (!FREEVAL_HCM.getAdaptiveRampMeteringAvailable()) {
            //adaptiveButton.setVisible(false);
            cfgPanel.remove(adaptiveButton);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        raPanel = new javax.swing.JPanel();
        geneScenButton = new javax.swing.JButton();
        deleteAllScenButton = new javax.swing.JButton();
        showRLSummaryButton = new javax.swing.JButton();
        cfgPanel = new javax.swing.JPanel();
        globalButton = new javax.swing.JButton();
        adaptiveButton = new javax.swing.JButton();
        fillButton = new javax.swing.JButton();
        atdmPanel = new javax.swing.JPanel();
        atdmAssignButton = new javax.swing.JButton();
        atdmDeleteButton = new javax.swing.JButton();
        atdmSummaryButton = new javax.swing.JButton();
        mlPanel = new javax.swing.JPanel();
        mlButton = new javax.swing.JButton();

        raPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reliability Analysis (RL)"));
        raPanel.setLayout(new java.awt.GridLayout(1, 3));

        geneScenButton.setText("Generate");
        geneScenButton.setToolTipText("Generate reliability analysis scenarios for currently selected project");
        geneScenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneScenButtonActionPerformed(evt);
            }
        });
        raPanel.add(geneScenButton);

        deleteAllScenButton.setText("Delete");
        deleteAllScenButton.setToolTipText("Delete all reliability scenarios for currently selected project");
        deleteAllScenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllScenButtonActionPerformed(evt);
            }
        });
        raPanel.add(deleteAllScenButton);

        showRLSummaryButton.setText("Summary");
        showRLSummaryButton.setToolTipText("Show reliability analysis summary for currently selected project");
        showRLSummaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRLSummaryButtonActionPerformed(evt);
            }
        });
        raPanel.add(showRLSummaryButton);

        cfgPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Seed Facility"));
        cfgPanel.setLayout(new java.awt.GridLayout(1, 4));

        globalButton.setText("Global Input");
        globalButton.setToolTipText("Edit global/facility/seed input and prefill data for currently selected project");
        globalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                globalButtonActionPerformed(evt);
            }
        });
        cfgPanel.add(globalButton);

        adaptiveButton.setText("Adap.R.M.");
        adaptiveButton.setToolTipText("Edit Adaptive Ramp Metering Parameters");
        adaptiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaptiveButtonActionPerformed(evt);
            }
        });
        cfgPanel.add(adaptiveButton);

        fillButton.setText("Fill Data");
        fillButton.setToolTipText("Quick fill data in input table of currently selected project");
        fillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillButtonActionPerformed(evt);
            }
        });
        cfgPanel.add(fillButton);

        atdmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("ATDM Analysis"));
        atdmPanel.setLayout(new java.awt.GridLayout(1, 3));

        atdmAssignButton.setText("Configure");
        atdmAssignButton.setToolTipText("Configure and assign ATDM analysis strategies and plans for currently selected project");
        atdmAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atdmAssignButtonActionPerformed(evt);
            }
        });
        atdmPanel.add(atdmAssignButton);

        atdmDeleteButton.setText("Delete");
        atdmDeleteButton.setToolTipText("Delete one or all ATDM sets in currently selected project");
        atdmDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atdmDeleteButtonActionPerformed(evt);
            }
        });
        atdmPanel.add(atdmDeleteButton);

        atdmSummaryButton.setText("Summary");
        atdmSummaryButton.setToolTipText("Show ATDM analysis summary for currently selected project");
        atdmSummaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atdmSummaryButtonActionPerformed(evt);
            }
        });
        atdmPanel.add(atdmSummaryButton);

        mlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Managed Lanes"));
        mlPanel.setLayout(new java.awt.GridLayout(1, 0));

        mlButton.setText("Turn On");
        mlButton.setToolTipText("Toggle whether managed lanes are used in currently selected project");
        mlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mlButtonActionPerformed(evt);
            }
        });
        mlPanel.add(mlButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cfgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(mlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(raPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(atdmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cfgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(raPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(atdmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void geneScenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneScenButtonActionPerformed
        mainWindow.generateRL();
    }//GEN-LAST:event_geneScenButtonActionPerformed

    private void globalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_globalButtonActionPerformed
        mainWindow.globalInput();
    }//GEN-LAST:event_globalButtonActionPerformed

    private void fillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillButtonActionPerformed
        mainWindow.fillData();
    }//GEN-LAST:event_fillButtonActionPerformed

    private void showRLSummaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRLSummaryButtonActionPerformed
        mainWindow.showRLSummary();
    }//GEN-LAST:event_showRLSummaryButtonActionPerformed

    private void atdmAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atdmAssignButtonActionPerformed
        mainWindow.generateATDM();
    }//GEN-LAST:event_atdmAssignButtonActionPerformed

    private void deleteAllScenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllScenButtonActionPerformed
        mainWindow.deleteAllScen();
    }//GEN-LAST:event_deleteAllScenButtonActionPerformed

    private void mlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mlButtonActionPerformed
        mainWindow.toggleManagedLane();
    }//GEN-LAST:event_mlButtonActionPerformed

    private void atdmDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atdmDeleteButtonActionPerformed
        mainWindow.deleteAllATDM();
    }//GEN-LAST:event_atdmDeleteButtonActionPerformed

    private void atdmSummaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atdmSummaryButtonActionPerformed
        mainWindow.showATDMSummary();
    }//GEN-LAST:event_atdmSummaryButtonActionPerformed

    private void adaptiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaptiveButtonActionPerformed
        mainWindow.editAdaptiveRampMetering();
    }//GEN-LAST:event_adaptiveButtonActionPerformed

    /**
     * Configure display when the seed is null
     */
    @Override
    public void setNullSeed() {
        raPanel.setEnabled(false);
        showRLSummaryButton.setEnabled(false);
        cfgPanel.setEnabled(false);
        fillButton.setEnabled(false);
        geneScenButton.setEnabled(false);
        deleteAllScenButton.setEnabled(false);
        globalButton.setEnabled(false);
        adaptiveButton.setEnabled(false);
        atdmPanel.setEnabled(false);
        atdmAssignButton.setEnabled(false);
        atdmDeleteButton.setEnabled(false);
        atdmSummaryButton.setEnabled(false);

        mlPanel.setEnabled(false);
        mlButton.setEnabled(false);
    }

    /**
     * Configure display when the seed is not null
     */
    @Override
    public void setNonNullSeed() {
        raPanel.setEnabled(true);
        showRLSummaryButton.setEnabled(true);
        cfgPanel.setEnabled(true);
        fillButton.setEnabled(true);
        geneScenButton.setEnabled(true);
        deleteAllScenButton.setEnabled(true);
        globalButton.setEnabled(true);
        adaptiveButton.setEnabled(true);
        atdmPanel.setEnabled(true);
        atdmAssignButton.setEnabled(true);
        atdmDeleteButton.setEnabled(true);
        atdmSummaryButton.setEnabled(true);

        mlPanel.setEnabled(true);
        mlButton.setEnabled(true);
    }

    /**
     * Enable reliability analysis options
     */
    @Override
    public void enableRL() {
        geneScenButton.setEnabled(true);
        deleteAllScenButton.setEnabled(true);
        showRLSummaryButton.setEnabled(true);
    }

    /**
     * Disable reliability analysis options
     */
    @Override
    public void disableRL() {
        geneScenButton.setEnabled(false);
        deleteAllScenButton.setEnabled(false);
        showRLSummaryButton.setEnabled(false);
    }

    /**
     * Enable ATDM analysis options
     */
    @Override
    public void enableATDM() {
        atdmAssignButton.setEnabled(true);
        atdmDeleteButton.setEnabled(true);
        atdmSummaryButton.setEnabled(true);
    }

    /**
     * Disable ATDM analysis options
     */
    @Override
    public void disableATDM() {
        atdmAssignButton.setEnabled(false);
        atdmDeleteButton.setEnabled(false);
        atdmSummaryButton.setEnabled(false);
    }

    /**
     * Enable managed lanes analysis options
     */
    @Override
    public void enableML() {
        mlButton.setEnabled(true);
    }

    /**
     * Disable managed lanes analysis options
     */
    @Override
    public void disableML() {
        mlButton.setEnabled(false);
    }

    /**
     * Turn on managed lanes analysis options
     */
    @Override
    public void turnOnML() {
        mlButton.setText("Turn Off");
    }

    /**
     * Turn off managed lanes analysis options
     */
    @Override
    public void turnOffML() {
        mlButton.setText("Turn On");
    }

    /**
     * Toolbox specific actions to be taken when the seed data changes.
     *
     * @param changeType
     */
    @Override
    public void seedDataChanged(int changeType) {
        // Nothing - handled within seed
    }

    @Override
    public void seedDataChanged(int changeType, int changeSegStart, int changeSegEnd) {
        // Nothing - handled within seed
    }

    @Override
    public void onEnteringToolbox() {
        mainWindow.enableSingleSeedIOAndComparePanels();
        if (mainWindow.getActiveSeed() == null) {
            setNullSeed();
        } else {
            setNonNullSeed();
        }
    }

    @Override
    public void onLeavingToolbox() {
        // Nothing
    }

    @Override
    public void fillData() {
        mainWindow.fillData();
    }

    @Override
    public String getAddSegmentWarningString() {
        return "Warning: This will delete any Reliability Analysis for the current project.";
    }

    @Override
    public String getDelSegmentWarningString() {
        return "Warning: This will delete any Reliability Analysis for the current project.";
    }

    @Override
    public String getAddPeriodWarningString() {
        return "Warning: This will delete any Reliability Analysis for the current project.";
    }

    @Override
    public String getDelPeriodWarningString() {
        return "Warning: This will delete any Reliability Analysis for the current project.";
    }

    // <editor-fold defaultstate="collapsed" desc="setter and getters">
    /**
     * Setter for mainWindow connection
     *
     * @param mainWindow main window instance
     */
    @Override
    public void setMainWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adaptiveButton;
    private javax.swing.JButton atdmAssignButton;
    private javax.swing.JButton atdmDeleteButton;
    private javax.swing.JPanel atdmPanel;
    private javax.swing.JButton atdmSummaryButton;
    private javax.swing.JPanel cfgPanel;
    private javax.swing.JButton deleteAllScenButton;
    private javax.swing.JButton fillButton;
    private javax.swing.JButton geneScenButton;
    private javax.swing.JButton globalButton;
    private javax.swing.JButton mlButton;
    private javax.swing.JPanel mlPanel;
    private javax.swing.JPanel raPanel;
    private javax.swing.JButton showRLSummaryButton;
    // End of variables declaration//GEN-END:variables
}
