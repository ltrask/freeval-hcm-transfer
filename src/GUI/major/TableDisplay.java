package GUI.major;

import GUI.major.graphicHelper.TableDisplayController;
import GUI.major.tableHelper.SegIOTableWithSetting;
import GUI.major.tableHelper.SensorSet;
import GUI.major.tableHelper.SplitTableJPanel;
import GUI.major.tableHelper.TableCellSetting;
import coreEngine.Seed;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * This is the major table display for segment inputs and outputs.
 *
 * @author Shu Liu
 */
public class TableDisplay extends javax.swing.JPanel {

    protected MainWindow mainWindow;

    protected TableDisplayController controller;

    /**
     * Creates new form TableDisplay
     */
    public TableDisplay() {
        initComponents();
        segIOTable = new SegIOTableWithSetting();
        segIOSplitTable
                = new SplitTableJPanel(segIOTable.getFirstColumnTable(), segIOTable.getRestColumnTable());
        segIOSplitTable.setDividerLocation(270);
        add(segIOSplitTable);

        //set up for set highlight
        ListSelectionListener listener = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int col = segIOTable.getRestColumnTable().getSelectedColumn();
                if (col >= 0) {
                    mainWindow.segmentSelectedByTable(col);
                    if (controller != null) {
                        controller.segmentHighlightedByTable(col);
                    }
                }
            }
        };

        //segIOTable.getRestColumnTable().getSelectionModel().addListSelectionListener(listener);
        segIOTable.getRestColumnTable().getColumnModel().getSelectionModel().addListSelectionListener(listener);
    }

    /**
     * Show data for a particular seed, scenario and period
     *
     * @param seed seed to be displayed
     * @param scen index of scenario to be displayed
     * @param atdm ATDM set index to be displayed
     * @param period index of period to be displayed
     */
    public void selectSeedScenATDMPeriod(Seed seed, int scen, int atdm, int period) {
        segIOTable.selectSeedScenPeriod(seed, scen, atdm, period);
    }

    /**
     * Show input
     */
    public void showInput() {
        segIOTable.showInput();
    }

    /**
     * Show output
     */
    public void showOutput() {
        segIOTable.showOutput();
    }

    /**
     * Show input and output
     */
    public void showInputAndOutput() {
        segIOTable.showInputAndOutput();
    }

    /**
     * Configure whether or not computed downstream values are shown in the
     * single seed/scenario IO table.
     *
     * @param toggle True if shown, false if hidden
     */
    public void toggleShowComputedDownstreamValues(boolean toggle) {
        segIOTable.toggleShowComputedDownstreamValues(toggle);
    }

    /**
     * Update table
     */
    public void update() {
        segIOTable.update();
    }

    /**
     * Highlight a particular segment
     *
     * @param seg segment index (start with 0) to be highlighted
     */
    public void setHighlight(int seg) {
        //set which segment to be highlighted
        if (seg >= 0 && seg < segIOTable.getRestColumnTable().getColumnCount()) {
            segIOTable.getRestColumnTable().setColumnSelectionInterval(seg, seg);
        }
    }

    /**
     * Configure display to show general purpose segments only
     */
    public void showGPOnly() {
        segIOTable.showGPOnly();
    }

    /**
     * Configure display to show managed lanes segments only
     */
    public void showMLOnly() {
        segIOTable.showMLOnly();
    }

    /**
     * Configure display to show both general purpose and managed lanes segments
     */
    public void showGPML() {
        segIOTable.showGPML();
    }

    public void toggleSensorView(boolean toggle, SensorSet sensorSet) {
        segIOTable.toggleSensorView(toggle, sensorSet);
    }

    public void enableDisplayOptionsPopupMenu(boolean enabled) {
        segIOSplitTable.enableDisplayOptionsPopupMenu(enabled);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="setter and getters">
    /**
     * Setter for mainWindow connection
     *
     * @param mainWindow main window instance
     */
    public void setMainWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;
        segIOTable.setMainWindow(mainWindow);
    }

    /**
     * Setter for a non mainWindow controller connection that will be updated
     * along with the MainWindow for things like segment highlighting, etc.
     *
     * @param controller
     */
    public void setTableDisplayController(TableDisplayController controller) {
        this.controller = controller;
    }

    /**
     * Getter for segIOTable
     *
     * @return segIOTable instance
     */
    public SegIOTableWithSetting getSegIOTable() {
        return segIOTable;
    }

    /**
     * Setter for new cell settings to be used
     *
     * @param cellSettings new cell settings to be used
     */
    public void setCellSettings(ArrayList<TableCellSetting> cellSettings) {
        segIOTable.setCellSettings(cellSettings);
    }

    /**
     * Setter for table font
     *
     * @param newTableFont new table font
     */
    public void setTableFont(Font newTableFont) {
        segIOTable.setTableFont(newTableFont);
        segIOTable.getFirstColumnTable().setFont(newTableFont);
        segIOTable.getFirstColumnTable().setRowHeight(newTableFont.getSize() + 2);
        segIOTable.getRestColumnTable().setFont(newTableFont);
        segIOTable.getRestColumnTable().setRowHeight(newTableFont.getSize() + 2);
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private SegIOTableWithSetting segIOTable;

    private final SplitTableJPanel segIOSplitTable;
}
