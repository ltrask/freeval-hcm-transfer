package GUI.major.floatingWindowHelper;

import GUI.major.MainWindow;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 * This class is the dialog to create floating window of components in main
 * window.
 *
 * @author Shu Liu
 */
public class CreateFloatingWindowDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new FloatingWindowDialog
     *
     * @param mainWindow MainWindow instance
     */
    public CreateFloatingWindowDialog(MainWindow mainWindow) {
        super(mainWindow, true);
        initComponents();
        configCheckBoxes(mainWindow);
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    private void configCheckBoxes(MainWindow mainWindow) {
        if (mainWindow.isToolboxInFloat()) {
            toolboxCB.setSelected(true);
        }

        if (mainWindow.isSingleInFloat()) {
            singleCB.setSelected(true);
        }

        if (mainWindow.isCompareInFloat()) {
            compareCB.setSelected(true);
        }

        if (mainWindow.isContourInFloat()) {
            contourCB.setSelected(true);
        }

        if (mainWindow.isSegmentInFloat()) {
            segmentCB.setSelected(true);
        }

        if (mainWindow.isPeriodInFloat()) {
            periodCB.setSelected(true);
        }

        if (mainWindow.isLogInFloat()) {
            logCB.setSelected(true);
        }

        if (mainWindow.isNavigatorInFloat()) {
            navigatorCB.setSelected(true);
        }

        if (!mainWindow.isOutputEnabled()) {
            contourCB.setEnabled(false);
            segmentCB.setEnabled(false);
            periodCB.setEnabled(false);
        }
    }

    /**
     * Getter for return status
     *
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        toolboxCB = new javax.swing.JCheckBox();
        navigatorCB = new javax.swing.JCheckBox();
        singleCB = new javax.swing.JCheckBox();
        contourCB = new javax.swing.JCheckBox();
        periodCB = new javax.swing.JCheckBox();
        segmentCB = new javax.swing.JCheckBox();
        compareCB = new javax.swing.JCheckBox();
        logCB = new javax.swing.JCheckBox();

        setTitle("Create Floating Window");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Please Select Component To Be Shown In Floating Window"));
        jPanel1.setLayout(new java.awt.GridLayout(4, 2));

        toolboxCB.setText("Toolbox");
        jPanel1.add(toolboxCB);

        navigatorCB.setText("Navigator");
        jPanel1.add(navigatorCB);

        singleCB.setText("Single Scenario Input/Output");
        jPanel1.add(singleCB);

        contourCB.setText("Result Contour");
        jPanel1.add(contourCB);

        periodCB.setText("Analysis Period Summary");
        jPanel1.add(periodCB);

        segmentCB.setText("Segment & Facility Summary");
        jPanel1.add(segmentCB);

        compareCB.setText("Compare");
        jPanel1.add(compareCB);

        logCB.setText("Log");
        jPanel1.add(logCB);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox compareCB;
    private javax.swing.JCheckBox contourCB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox logCB;
    private javax.swing.JCheckBox navigatorCB;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox periodCB;
    private javax.swing.JCheckBox segmentCB;
    private javax.swing.JCheckBox singleCB;
    private javax.swing.JCheckBox toolboxCB;
    // End of variables declaration//GEN-END:variables

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isToolboxSelected() {
        return toolboxCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isCompareSelected() {
        return compareCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isContourSelected() {
        return contourCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isLogSelected() {
        return logCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isNavigatorSelected() {
        return navigatorCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isPeriodSelected() {
        return periodCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isSegmentSelected() {
        return segmentCB.isSelected();
    }

    /**
     * Getter for whether a particular component is selected in this dialog
     *
     * @return whether a particular component is selected in this dialog
     */
    public boolean isSingleSelected() {
        return singleCB.isSelected();
    }

    private int returnStatus = RET_CANCEL;
}
