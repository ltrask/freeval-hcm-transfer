package GUI.ATDMHelper;

import GUI.major.MainWindow;
import coreEngine.Helper.CEConst;
import coreEngine.Seed;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;

/**
 * This dialog is used to perform batch run of scenarios
 *
 * @author Shu Liu
 */
public class ATDMBatchRunDialog extends javax.swing.JDialog
        implements PropertyChangeListener {

    /**
     * Invoked when task's progress property changes.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
        }
    }

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     *
     */
    public static final int NUM_THREAD = 4;

    private final Seed seed;

    private final MainWindow mainWindow;

    /**
     * Creates new form NewOkCancelDialog
     *
     * @param seed seed to be analyzed
     * @param mainWindow mainWindow for return message
     */
    public ATDMBatchRunDialog(Seed seed, MainWindow mainWindow) {
        super(mainWindow, true);
        initComponents();

        //set starting position
        this.setLocationRelativeTo(this.getRootPane());

        this.seed = seed;
        this.mainWindow = mainWindow;

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });

        doRun();
    }

    /**
     * Getter for return status
     *
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();

        setTitle("Batch Run");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doRun() {
        class Task extends SwingWorker<Void, Void> {
            /*
             * Main task. Executed in background thread.
             */

            @Override
            public Void doInBackground() {
                //timing starts
                long timingStart = new Date().getTime();

                int total = 0;
                for (int atdm = 0; atdm < seed.getValueInt(CEConst.IDS_ATDM_SET_NUM); atdm++) {
                    total += seed.getATDMSets().get(atdm).size();
                }

                int count = 0;
                for (int atdm = 0; atdm < seed.getValueInt(CEConst.IDS_ATDM_SET_NUM); atdm++) {
                    for (int scen : seed.getATDMSets().get(atdm).keySet()) {
                        if (!seed.hasValidOutput(scen, atdm)) {
                            seed.singleRun(scen, atdm);
                        }
                        if (!seed.hasValidOutput(scen, -1)) {
                            seed.singleRun(scen, -1);
                        }
                        count++;
                        setProgress(count * 100 / total);
                    }
                }

                //timing ends
                long timingEnd = new Date().getTime();
                System.out.println("Batch run finished. Time cost: "
                        + (timingEnd - timingStart) + " ms");

                mainWindow.printLog("Batch run finished ("
                        + ((timingEnd - timingStart) > 1000
                                ? (timingEnd - timingStart) / 1000 + " s)"
                                : (timingEnd - timingStart) + " ms)"));

                return null;
            }

            /*
             * Executed in event dispatching thread
             */
            @Override
            public void done() {
                progressBar.setString("Finish");
                doClose(RET_OK);
            }
        }

        try {
            progressBar.setStringPainted(true);
            progressBar.setString("Analyzing, please wait...");

            Task task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error occured in batch run",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
