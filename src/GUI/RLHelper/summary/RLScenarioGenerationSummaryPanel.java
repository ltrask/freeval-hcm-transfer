/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.RLHelper.summary;

import GUI.RLHelper.Renderer.AlternatingColorsRenderer;
import GUI.major.MainWindow;
import coreEngine.Seed;
import coreEngine.reliabilityAnalysis.DataStruct.IncidentEvent;
import coreEngine.reliabilityAnalysis.DataStruct.ScenarioInfo;
import coreEngine.reliabilityAnalysis.DataStruct.WeatherEvent;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author jltrask
 */
public class RLScenarioGenerationSummaryPanel extends javax.swing.JPanel {

    private IncidentSummaryTableModel incidentSummaryModel;

    private WeatherSummaryTableModel weatherSummaryModel;

    private Seed seed;

    private final AlternatingColorsRenderer altColorRenderer = new AlternatingColorsRenderer(true);

    /**
     * Creates new form RLScenarioGenerationSummaryPanel
     */
    public RLScenarioGenerationSummaryPanel() {
        initComponents();

        altColorRenderer.setHorizontalAlignment(JLabel.CENTER);

        incidentSummaryTable.setDefaultRenderer(Object.class, altColorRenderer);
        incidentSummaryTable.setDefaultRenderer(Integer.class, altColorRenderer);
        incidentSummaryTable.setFont(MainWindow.DEFAULT_TABLE_FONT);
        incidentSummaryTable.setRowHeight(MainWindow.DEFAULT_TABLE_FONT.getSize() + 2);

        incidentSummaryTable.getColumnModel().getColumn(0).setMinWidth(120);
        incidentSummaryTable.getColumnModel().getColumn(1).setMinWidth(120);
        for (int col = 2; col < incidentSummaryTable.getColumnCount(); col++) {
            incidentSummaryTable.getColumnModel().getColumn(col).setMinWidth(40);
        }

        // Making the table look nicer
        Font tableFont = incidentSummaryTable.getTableHeader().getFont();
        Font newHeaderFont = new Font(tableFont.getFamily(), Font.BOLD, tableFont.getSize());
        incidentSummaryTable.getTableHeader().setFont(newHeaderFont);

        weatherSummaryTable.setDefaultRenderer(Object.class, altColorRenderer);
        weatherSummaryTable.setDefaultRenderer(Integer.class, altColorRenderer);
        weatherSummaryTable.setFont(MainWindow.DEFAULT_TABLE_FONT);
        weatherSummaryTable.setRowHeight(MainWindow.DEFAULT_TABLE_FONT.getSize() + 2);

        weatherSummaryTable.getColumnModel().getColumn(0).setMinWidth(120);

        // Making the table look nicer
        tableFont = weatherSummaryTable.getTableHeader().getFont();
        newHeaderFont = new Font(tableFont.getFamily(), Font.BOLD, tableFont.getSize());
        weatherSummaryTable.getTableHeader().setFont(newHeaderFont);

    }

    public void setSeed(Seed seed) {
        this.seed = seed;
        // Incident Summary
        incidentSummaryModel = new IncidentSummaryTableModel(seed, IncidentSummaryTableModel.TABLE_TYPE_INCIDENT_TYPE);
        incidentSummaryTable.setModel(incidentSummaryModel);

        incidentSummaryTable.getColumnModel().getColumn(0).setMinWidth(120);
        incidentSummaryTable.getColumnModel().getColumn(1).setMinWidth(120);
        for (int col = 2; col < incidentSummaryTable.getColumnCount(); col++) {
            incidentSummaryTable.getColumnModel().getColumn(col).setMinWidth(35);
            incidentSummaryTable.getColumnModel().getColumn(col).setPreferredWidth(40);
        }

        // Weather Summary
        weatherSummaryModel = new WeatherSummaryTableModel(seed, WeatherSummaryTableModel.TABLE_TYPE_WEATHER_TYPE);
        weatherSummaryTable.setModel(weatherSummaryModel);

        weatherSummaryTable.getColumnModel().getColumn(0).setMinWidth(120);
        weatherSummaryTable.getColumnModel().getColumn(1).setMinWidth(120);
        for (int col = 2; col < weatherSummaryTable.getColumnCount(); col++) {
            weatherSummaryTable.getColumnModel().getColumn(col).setMinWidth(35);
            weatherSummaryTable.getColumnModel().getColumn(col).setPreferredWidth(40);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        IncidentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        incidentSummaryTable = new javax.swing.JTable();
        WeatherPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        weatherSummaryTable = new javax.swing.JTable();

        incidentSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        incidentSummaryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        incidentSummaryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(incidentSummaryTable);

        javax.swing.GroupLayout IncidentPanelLayout = new javax.swing.GroupLayout(IncidentPanel);
        IncidentPanel.setLayout(IncidentPanelLayout);
        IncidentPanelLayout.setHorizontalGroup(
            IncidentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IncidentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                .addContainerGap())
        );
        IncidentPanelLayout.setVerticalGroup(
            IncidentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IncidentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Incident Event Summary", IncidentPanel);

        weatherSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        weatherSummaryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        weatherSummaryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(weatherSummaryTable);

        javax.swing.GroupLayout WeatherPanelLayout = new javax.swing.GroupLayout(WeatherPanel);
        WeatherPanel.setLayout(WeatherPanelLayout);
        WeatherPanelLayout.setHorizontalGroup(
            WeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                .addContainerGap())
        );
        WeatherPanelLayout.setVerticalGroup(
            WeatherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeatherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Weather Event Summary", WeatherPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Table Models">
    private class IncidentSummaryTableModel extends AbstractTableModel {

        private Seed seed;

        private String[] rowNames;
        private String[] columnNames;

        public static final int TABLE_TYPE_INCIDENT_TYPE = 0;

        private int[][] tableData;

        public IncidentSummaryTableModel(Seed seed, int tableType) {
            this.seed = seed;
            switch (tableType) {
                default:
                case TABLE_TYPE_INCIDENT_TYPE:
                    rowNames = new String[]{
                        "Shoulder Closure",
                        "1 Lane Closure",
                        "2 Lane Closure",
                        "3 Lane Closure",
                        "4+ Lane Closure",
                        "Total"
                    };
                    columnNames = new String[]{
                        "Incident Severity",
                        "Number of Incidents",
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    };
                    break;
            }

            extractFromSeed(tableType);
        }

        private void extractFromSeed(int tableType) {
            switch (tableType) {
                default:
                case TABLE_TYPE_INCIDENT_TYPE:
                    extractTableDataByIncidentType();
                    break;
            }
        }

        private void extractTableDataByIncidentType() {
            tableData = new int[rowNames.length][13];
            for (ScenarioInfo scen : seed.getRLScenarioInfo()) {
                for (IncidentEvent inc : scen.getGPIncidentEventList()) {
                    tableData[inc.severity][0] += 1;
                    tableData[inc.severity][scen.month + 1] += 1;
                }
            }

            // Summing for total number of incidents row
            for (int col = 0; col < tableData[0].length; col++) {
                for (int i = 0; i < tableData.length - 1; i++) {
                    tableData[tableData.length - 1][col] += tableData[i][col];
                }
            }

        }

        @Override
        public int getRowCount() {
            return rowNames.length;
        }

        @Override
        public int getColumnCount() {
            return tableData[0].length + 1;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return rowNames[row];
            } else {
                return tableData[row][col - 1];
            }
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            // Do nothing
        }

    }

    private class WeatherSummaryTableModel extends AbstractTableModel {

        private Seed seed;

        private String[] rowNames;

        private String[] columnNames;

        public static final int TABLE_TYPE_WEATHER_TYPE = 0;

        private int[][] tableData;

        public WeatherSummaryTableModel(Seed seed, int tableType) {
            this.seed = seed;
            switch (tableType) {
                default:
                case TABLE_TYPE_WEATHER_TYPE:
                    rowNames = new String[]{
                        "Medium Rain",
                        "Heavy Rain",
                        "Light Snow",
                        "Light/Medium Snow",
                        "Medium/Heavy Snow",
                        "Heavy Snow",
                        "Severe Cold",
                        "Low Visibility",
                        "Very Low Visibility",
                        "Minimum Visibility",
                        "Total"
                    };
                    columnNames = new String[]{
                        "Weather Severity",
                        "Number of Events",
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    };
                    break;
            }

            extractFromSeed(tableType);
        }

        private void extractFromSeed(int tableType) {
            switch (tableType) {
                default:
                case TABLE_TYPE_WEATHER_TYPE:
                    extractTableDataByIncidentType();
                    break;
            }
        }

        private void extractTableDataByIncidentType() {
            tableData = new int[rowNames.length][13];
            for (ScenarioInfo scen : seed.getRLScenarioInfo()) {
                for (WeatherEvent ev : scen.getWeatherEventList()) {
                    tableData[ev.severity][0] += 1;
                    tableData[ev.severity][scen.month + 1] += 1;
                }
            }

            // Summing for total number of weather events row
            for (int col = 0; col < tableData[0].length; col++) {
                for (int i = 0; i < tableData.length - 1; i++) {
                    tableData[tableData.length - 1][col] += tableData[i][col];
                }
            }

        }

        @Override
        public int getRowCount() {
            return rowNames.length;
        }

        @Override
        public int getColumnCount() {
            return tableData[0].length + 1;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return rowNames[row];
            } else {
                return (tableData[row][col - 1] == 0) ? "-" : tableData[row][col - 1];
            }
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            // Do nothing
        }

    }
//</editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel IncidentPanel;
    private javax.swing.JPanel WeatherPanel;
    private javax.swing.JTable incidentSummaryTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable weatherSummaryTable;
    // End of variables declaration//GEN-END:variables

}
